import fs from 'node:fs';
import https from 'node:https';
const token=process.env.FIGMA_TOKEN, fileKey=process.env.FILE_KEY;
if(!token||!fileKey){ console.error('Missing FIGMA_TOKEN or FILE_KEY'); process.exit(1); }
function get(path){ return new Promise((res,rej)=>{ const req=https.request({ hostname:'api.figma.com', path, method:'GET', headers:{'X-FIGMA-TOKEN':token}}, r=>{ let d=''; r.on('data',c=>d+=c); r.on('end',()=>{ try{ res(JSON.parse(d)); }catch(e){ rej(e);} }); }); req.on('error',rej); req.end(); });}
function toHex({r,g,b}){ const t=v=>('0'+Math.round(v*255).toString(16)).slice(-2); return '#'+t(r)+t(g)+t(b); }
(async()=>{
  let vars={}; try{ const v=await get(`/v1/files/${fileKey}/variables`); for(const c of v.meta?.collections||[]){ vars[c.name]={}; for(const id of c.variable_ids){ const vv=v.meta?.variables[id]; if(!vv) continue; const modes=vv.values_by_mode||vv.valuesByMode||{}; const k=Object.keys(modes)[0]; let val=modes[k]; if((vv.resolved_type||vv.resolvedType)==='COLOR'&&val) val=toHex(val); vars[c.name][vv.name]=val; } } }catch{}
  let paints={}; try{ const s=await get(`/v1/files/${fileKey}/styles`); for(const st of s.meta?.styles||[]){ if(st.style_type!=='FILL') continue; const nodes=await get(`/v1/files/${fileKey}/nodes?ids=${encodeURIComponent(st.node_id)}`); const node=nodes.nodes?.[st.node_id]?.document; const solid=(node?.fills||[]).find(x=>x.type==='SOLID'); if(solid) paints[st.name]=toHex(solid.color); } }catch{}
  const color={}; for(const [k,v] of Object.entries(paints)) color[k]=v; for(const [coll,items] of Object.entries(vars)) for(const [k,v] of Object.entries(items)) if(typeof v==='string'&&v.startsWith('#')) color[`${coll}/${k}`]=v;
  const tokens={ color:{ brand:{ primary: color['Brand/Primary']||'#0A6EEB', 'primary-600': color['Brand/Primary 600']||'#095CC3', accent: color['Brand/Accent']||'#2ED3B7' }, ui:{ bg: color['Surface/Background']||'#0B0D12', 'bg-elev': color['Surface/Elevated']||'#12151C', text: color['Text/Primary']||'#E6EAF2', muted: color['Text/Secondary']||'#A6B0C3', border: color['Border/Default']||'#2A2F3A' }, danger: color['Semantic/Danger']||'#EF4444', warn: color['Semantic/Warning']||'#F59E0B', success: color['Semantic/Success']||'#22C55E' }, radius:{ sm:'6px', md:'10px', lg:'14px' }, space:{ xs:'4px', sm:'8px', md:'12px', lg:'16px', xl:'24px', '2xl':'32px' }, shadow:{ sm:'0 1px 2px rgba(0,0,0,0.2)', md:'0 4px 12px rgba(0,0,0,0.3)' }, typography:{ fontFamily:{ base:'Inter' }, size:{ xs:12, sm:14, md:16, lg:20, xl:24, '2xl':32 }, weight:{ regular:400, medium:500, semibold:600 } }, charts:{ palette:['#0A6EEB','#2ED3B7','#F59E0B','#EF4444','#8B5CF6'] }, meta:{ source:'figma-rest', fileKey, exportedAt:new Date().toISOString() } };
  fs.mkdirSync('spec',{recursive:true}); fs.writeFileSync('spec/design-tokens.json', JSON.stringify(tokens,null,2)); console.log('âœ“ spec/design-tokens.json written');
})();
